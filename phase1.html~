<!DOCTYPE html>
<html>
  <head>
    <title>Pacman Code</title>
    <link rel="stylesheet" href="style.css">
    <link href='https://fonts.googleapis.com/css?family=Poppins|Press+Start+2P' rel='stylesheet' type='text/css'>  
  </head>

  <body>
    <div id="top"></div>
    <div class="page">
    <div class="navigation">
      <header>
	<h1><img src="pacman.png"/>... Pacman Code ...<img src="pacman.png"/></h1>
	<hr />
	<nav>
	  <ul>
	    <li><a href="index.html">Home</a></li>
	    <li><a href="code.html">Code</a></li>
	    <li><a href="clones.html">Clones</a></li>
	    <li><a href="discuss.html">Discuss</a></li>
	    <li><a href="about.html">About</a></li>
	    <li><a href="contact.html">Contact</a></li>
	  </ul>
	</nav>
      </header>
    </div>

    <hr />
    <h2>Stacks</h2>
    <div class="container">

      <p>A stack is a very useful data structure that we'll make good use of in our Pacman game.  A stack is like an array or a list, but access is restricted to just one end.  There are two-ended stacks, but we won't get into those.  This means that you add and remove data from the same end of the array.  An analogous example that every single book uses is a stack of trays in a cafeteria.  When new trays are added to the tray stack, they are placed on top.  When you remove a tray from the tray stack, you remove a tray from the top of the stack.  This type of collection is known as a LIFO protocol which just stands for Last In, First Out.  I like to refer to it as the Jesus protocol.  <figure><img src="jesusStacks.jpg" alt="stack of trays" width=186 height=200 /><figcaption>Yea, the First shall be Last, and the Last shall be First</figcaption></figure><figure><img src="stackflow.png" alt="Jesus protocol" width=200 hight=200 /><figcaption>Stack of trays are added and removed from the top</figcaption></figure></p>

    </div>

    <hr />
    
    <h2>Stack Class</h2>
    <div class="container">
      <div class="pseudoCode">
	<p>The stack class is pretty simple.  We store all of the elements in the stack in a list.  When we want to add an element we call the <span class="mn">push</span> method which will append the item to the end of the list.  When we want to remove an item from the stack we call the <span class="mn">pop</span> method which will return the item at the end of the list if there is one.  If we want to know what's on top of the stack without removing it we can call the <span class="mn">peek</span> method.  The <span class="mn">isEmpty</span> method is useful if we want to know if our stack is empty or not.  We also want to be able to <span class="mn">clear</span> out the stack.  </p>
      </div>
      <div class="codeText">
	<code>
	  <span class="kw">class</span> <span class="cn">Stack</span>(<span class="kw">object</span>):<br>
	  <div class="tabLeft">
	    <span class="kw">def</span> <span class="mn">__init__</span>(<span class="kw">self</span>):<br>
	    <div class="tabLeft">
	      <span class="kw">self</span>.items = []<br><br>
	    </div>
	    <span class="kw">def</span> <span class="mn">isEmpty</span>(<span class="kw">self</span>):<br>
	    <div class="tabLeft">
	      <span class="kw">if</span> <span class="mn">len</span>(<span class="kw">self</span>.items) > 0:<br>
	      <div class="tabLeft"><span class="kw">return</span> <span class="py">False</span><br></div>
	      <span class="kw">return</span> <span class="py">True</span><br><br>
	    </div>
	    <span class="kw">def</span> <span class="mn">length</span>(self):<br>
	    <div class="tabLeft">
	      <span class="kw">return</span> <span class="mn">len</span>(<span class="kw">self</span>.items)<br><br>
	    </div>
	    <span class="kw">def</span> <span class="mn">clear</span>(<span class="kw">self</span>):<br>
	    <div class="tabLeft">
	      <span class="kw">self</span>.items = []<br><br>
	    </div>
	    <span class="kw">def</span> <span class="mn">push</span>(<span class="kw">self</span>, item):<br>
	    <div class="tabLeft">
	      <span class="kw">self</span>.items.<span class="mn">append</span>(item)<br><br>
	    </div>
	    <span class="kw">def</span> <span class="mn">pop</span>(self):<br>
	    <div class="tabLeft">
	      <span class="kw">if</span> <span class="mn">len</span>(<span class="kw">self</span>.items) > 0:<br>
	      <div class="tabLeft">
		<span class="var">removedItem</span> = <span class="kw">self</span>.items.<span class="mn">pop</span>(<span class="mn">len</span>(<span class="kw">self</span>.items)-1)<br>
		<span class="kw">return</span> <span class="var">removedItem</span><br>
	      </div>
	      <span class="kw">return</span> <span class="py">None</span><br><br>
	    </div>
	    <span class="kw">def</span> <span class="mn">peek</span>(self):<br>
	    <div class="tabLeft">
	      <span class="kw">if</span> <span class="mn">len</span>(<span class="kw">self</span>.items) > 0:<br>
	      <div class="tabLeft">
		<span class="kw">return</span> <span class="kw">self</span>.items[<span class="mn">len</span>(<span class="kw">self</span>.items)-1]<br>
	      </div>
	      <span class="kw">return</span> <span class="py">None</span><br><br>
	    </div>

	  </div>
	</code>
      </div>
      
    </div>

    </div>
    <div class="buffer"></div>
    <footer>
      <div class="bottomNav">
	<ul>
	  <li><a href="vectors.html">Previous</a></li>
	  <li><a href="#top">Top</a></li>
	  <li><a href="#top">Next</a></li>
	</ul>
      </div>
    </footer>
  </body>
</html>
