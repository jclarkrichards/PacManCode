<!DOCTYPE html>
<html>
  <head>
    <title>Pacman Code</title>
    <link rel="stylesheet" href="style.css">
    <link href='https://fonts.googleapis.com/css?family=Poppins|Press+Start+2P' rel='stylesheet' type='text/css'>  
  </head>

  <body>
    <div id="top"></div>
    <div class="page">
    <div class="navigation">
      <header>
	<h1><img src="Images/pacman.png"/>... Pacman Code ...<img src="Images/pacman.png"/></h1>
	<hr />
	<nav>
	  <ul>
	    <li><a href="index.html">Home</a></li>
	    <li><a href="code.html">Code</a></li>
	    <li><a href="clones.html">Clones</a></li>
	    <li><a href="discuss.html">Discuss</a></li>
	    <li><a href="about.html">About</a></li>
	    <li><a href="contact.html">Contact</a></li>
	  </ul>
	</nav>
      </header>
    </div>

    <hr />
    <h2>Section 1: Moving Around the Screen</h2>
    <div class="container">
      <h3>Physics 101</h3>
      <p>Alright, so we got a blank window to pop up for us.  Now lets actually draw something to the screen and move it around with the keyboard keys.  We're going to use the four directional keys on the keyboard, but you can just as easily use the WASD keys or any other key combination.  I figure the directional keys make the most sense for Pacman because we can only move him in one of four directions anyways.  The main idea behind movement is that you're just changing the object's pixel position by a certain amount and redrawing the object at that location.  With each iteration through the game loop how many pixels should we move the object?  The larger that number, the faster the object will move.  However, that's not a good solution because then the speed of the object will depend on how fast the user's computer is.  If the user has a top of the line super fast computer, then it will be able to go through the game loop more often than a slower computer.  We would rather have something that allows the objects to move at the same speed no matter how fast or slow the user's computer is.  So instead of specifying how many pixels to move the object during each game loop iteration, we need to calculate how many pixels to move the object for each iteration of the game loop.  On faster computers, that distance will be shorter during each iteration, and on slower computers that distance will be longer.  So how do we calculate the distance we need the object to move during each game loop iteration?  We can simply use basic physics.  If you remember back to your physics classes (assuming you've taken at least one year of physics), then you'll remember that there were 3 basic equations in order to calculate an objects position and velocity at some future time.  The main equation we're concerned with is: </p>
      <p><b><span class="equations">s(t) = s<sub>0</sub> + v&Delta;t + &frac12;*a&Delta;t<sup>2</sup></span></b></p>
      <p>So in the equation above we're saying that s<sub>0</sub> is our current position.  This equation will calculate what our next position will be given our velocity (v), acceleration (a), and the time it takes to get us there (&Delta;t).  We can simplify this because in Pacman we're not concerned with acceleration.  He's not slowing down or speeding up when he moves.  His speed is either 0 or max speed in most situations.  So his acceleration is 0 which means the equation simplifies to:</p>
      <p><b><span class="equations">s(t) = s<sub>0</sub> + v&Delta;t</span></b></p>
      <p>So to calculate his new position all we need is his current velocity and the time it takes to get to the new position.  Figuring out the time is really easy since Python includes some timing methods for us to use in order to keep track of time.  In fact, there's a method that will calculate how long each iteration through our game loop takes, which is exactly what we need for our equation.</p>

      <div class="pseudoCode">
	<p>What we need to do is initialize a clock.  We add this line of code in our <span class="mn">__init__</span> method in the gamecontrol.py file.  </p>
      </div>
      <div class="codeText">
	<span class="kw">self</span>.clock = pygame.time.Clock()
      </div>
      <hr/>
      <div class="pseudoCode">
	<p>Now in our <span class="mn">update</span> method in the gamecontrol.py file we'll add the following.  We divide it by 1000.0 because clock.tick returns the time in milliseconds and we want our &Delta;t to be in seconds.</p>
      </div>
      <div class="codeText">
	dt = <span class="kw">self</span>.clock.tick(30) / 1000.0
      </div>
      <hr/>
      <p>How do we deal with the velocity in our equation?  Well, velocity is a vector and we've already covered vectors and have a Vector2D class waiting for us to use.  The magnitude of velocity is speed, and the direction of velocity is just whatever direction we're moving in.  We can rewrite velocity as speed * direction where direction is a unit vector.  So our equation now becomes:</p>
      <p><b><span class="equations">s(t) = s<sub>0</sub> + speed*direction*&Delta;t</span></b></p>
      <p>Speed is just some scalar value that we'll have to play around with in order to find the right value.  The direction is a unit vector that has a length of 1 and points in the direction we need to move the object.  Luckily for us Pacman can only move in one of four possible directions:  UP, DOWN, LEFT, or RIGHT.  These directions never change so lets add them to our constants.py file.  </p>
      
      <hr/>
      <div class="pseudoCode">
	<p>First off, in order to use vectors we'll have to import the Vector2D class.  So that line goes on the top of the file.  The rest can go anywhere in the file, they don't have to come directly after the <span class="kw">import</span>.  Notice that I also included a <span class="var">STOP</span> vector which is a zero vector.  We'll need that because sometimes Pacman isn't moving, and giving him this vector will stop him in his tracks.  I also went ahead and declared another color:  <span class="var">YELLOW</span>.  Because that's the color we're going to make our Pacman object.</p>
      </div>
      <div class="codeText">
	<span class="kw">from</span> vectors <span class="kw">import</span> Vector2D<br>
	<span class="var">UP</span> Vector2D(0, -1)<br>
	<span class="var">DOWN</span> Vector2D(0, 1)<br>
	<span class="var">LEFT</span> Vector2D(-1, 0)<br>
	<span class="var">RIGHT</span> Vector2D(1, 0)<br>
	<span class="var">STOP</span> Vector2D()<br><br>
	<span class="var">YELLOW</span> = (255, 255, 0)
      </div>
      <hr/>
      <p></p>
      <p>Right now this doesn't do anything useful because we don't have an object to apply it to.  Let's create an object called Pacman, that is the whole point of this website after all.  We're going to create a new file called pacman.py and add the following to it.</p>
      <hr/>
      
      <div class="pseudoCode">
	<p>We first import everything we need to import.  This should start to look familiar to you.  When we create a Pacman object we'll give it a name of <span class="str">"pacman"</span>.  We don't have to do this, but it'll come in handy later on.  We also give it an initial position of (200, 400).  This will change later on, but for now you can input any initial position here.  The initial direction of Pacman is <span class="var">STOP</span> because we don't want him moving unless we say so.  We also specify his speed, color, and radius.  The radius is just how big we want him to be since at this time we're just going to represent Pacman as a yellow circle with a radius of 10 pixels.  In the <span class="mn">update</span> method we calculate his new position based on the equation above.  Notice that if his direction is <span class="var">STOP</span> then his position doesn't change.  We also check for key presses since we want to detect if the user is pressing the correct keys.  If we detect that the user has pressed either the UP, DOWN, LEFT, or RIGHT keys then we call the <span class="mn">move</span> method and pass in the corresponding direction.  Right now the <span class="mn">move</span> method just sets the direction, but it will do a lot more soon.  We also need to be able to draw Pacman to the screen so we include his own <span class="mn">render</span> method here.  Like I said before we're representing him as a circle, so that's what we'll draw to the screen.  </p>
      </div>
      <div class="codeText">
	<code>
	<span class="kw">import</span> pygame<br>
	<span class="kw">from</span> pygame.<span class="mn">locals</span> <span class="kw">import</span> *<br>
	<span class="kw">from</span> vectors <span class="kw">import</span> Vector2D<br>
	<span class="kw">from</span> constants <span class="kw">import</span> *<br><br>
	<span class="kw">class</span> <span class="cn">Pacman</span>(<span class="mn">object</span>):<br>
	<div class="tabLeft">
	  <span class="kw">def</span> <span class="mn">__init__</span>(<span class="kw">self</span>):<br>
	  <div class="tabLeft">
	    <span class="kw">self</span>.name = <span class="str">"pacman"</span><br>
	    <span class="kw">self</span>.position = Vector2D(200, 400)<br>
	    <span class="kw">self</span>.direction = STOP<br>
	    <span class="kw">self</span>.speed = 100<br>
	    <span class="kw">self</span>.radius = 10<br>
	    <span class="kw">self</span>.color = YELLOW<br><br>
	  </div>

	  <span class="kw">def</span> <span class="mn">update</span>(<span class="kw">self</span>, dt):<br>
	  <div class="tabLeft">
	    <span class="kw">self</span>.position += <span class="kw">self</span>.direction*<span class="kw">self</span>.speed*dt<br>
	    <span class="var">key_pressed</span> = pygame.key.get_pressed()<br>
	    <span class="kw">if</span> key_pressed[K_UP]:<br>
	    <div class="tabLeft">
	      <span class="kw">self</span>.move(UP)<br>
	    </div>
	    <span class="kw">if</span> key_pressed[K_DOWN]:<br>
	    <div class="tabLeft">
	      <span class="kw">self</span>.move(DOWN)<br>
	    </div>
	    <span class="kw">if</span> key_pressed[K_LEFT]:<br>
	    <div class="tabLeft">
	      <span class="kw">self</span>.move(LEFT)<br>
	    </div>
	    <span class="kw">if</span> key_pressed[K_RIGHT]:<br>
	    <div class="tabLeft">
	      <span class="kw">self</span>.move(RIGHT)<br>
	    </div>
	    <span class="kw">else</span>:<br>
	    <div class="tabLeft">
	      <span class="kw">self</span>.move(STOP)<br><br>
	    </div>
	  </div>
	
	  <span class="kw">def</span> <span class="mn">move</span>(<span class="kw">self</span>, direction):<br>
	  <div class="tabLeft">
	    <span class="kw">self</span>.direction = direction<br><br>
	  </div>

	  <span class="kw">def</span> <span class="mn">render</span>(<span class="kw">self</span>, screen):<br>
	  <div class="tabLeft">
	    <span class="var">px</span> = <span class="mn">int</span>(<span class="kw">self</span>.position.x)<br>
	    <span class="var">py</span> = <span class="mn">int</span>(<span class="kw">self</span>.position.y)<br>
	    pygame.draw.circle(screen, <span class="kw">self</span>.color, (px, py), <span class="kw">self</span>.radius)<br><br>
	  </div>	
	</div>
	</code>
      </div>
      <hr/>
      
      <p>Now that we have our Pacman class written we need to use it by creating a Pacman object.  So let's add the following code into our gamecontrol.py file.  I'm not going to write out the entire class like before, just where we need to make the changes.  Everything else stays the same.  </p>
      <div class="pseudoCode">
	<p>Somewhere at the top of the file we need to import our Pacman class.</p>
      </div>
      <div class="codeText">
	<code>
	  <span class="kw">from</span> pacman <span class="kw">import</span> Pacman
	</code>
      </div>
      <hr/>
      
      <div class="pseudoCode">
	<p>In our <span class="mn">startGame</span> method we'll create the Pacman object.</p>
      </div>
      <div class="codeText">
	<code>
	  <span class="kw">def</span> <span class="mn">startGame</span>(<span class="kw">self</span>):<br>
	  <div class="tabLeft">
	    <span class="kw">self</span>.pacman = Pacman()
	  </div>
	</code>
      </div>
      <hr/>
      
      <div class="pseudoCode">
	<p>We'll modify the <span class="mn">update</span> again by telling it to update the Pacman object as well.</p>
      </div>
      <div class="codeText">
	<code>
	  <span class="kw">def</span> <span class="mn">update</span>(<span class="kw">self</span>):<br>
	  <div class="tabLeft">
	    <span class="var">dt</span> = <span class="kw">self</span>.clock.tick(30) / 1000.0<br>
	    <span class="kw">self</span>.pacman.update(dt)<br>
	    <span class="kw">self</span>.checkEvents()<br>
	    <span class="kw">self</span>.render()
	  </div>
	</code>
      </div>
      <hr/>

      <div class="pseudoCode">
	<p>Finally we update our <span class="mn">render</span> method by adding these two new lines of code.  The first one we add in order to redraw the background.  If we don't add this then if there are any objects that move then they'll appear as if they are smearing across the screen.  We need to erase the objects and redraw them at their new positions.  The object will still move, but all of the images of the object at the previous positions will still be on screen as well.  So we need to basically erase all of the objects and redraw them at their new positions.  Try the code out with this line commented out to see what I mean.  And of course we need to tell the Pacman object to render as well.</p>
      </div>
      <div class="codeText">
	<code>
	  <span class="kw">def</span> <span class="mn">render</span>(<span class="kw">self</span>):<br>
	  <div class="tabLeft">
	    <span class="kw">self</span>.screen.blit(<span class="kw">self</span>.background, (0, 0))<br>
	    <span class="kw">self</span>.pacman.render(<span class="kw">self</span>.screen)<br>
	    pygame.display.update()
	  </div>
	</code>
      </div>
      <hr/>
      
      <h3>Conclusion</h3>
      <p>So we have a Pacman object that is able to move around the screen.  That's at least more exciting than the last section, right?  We still don't have a game here, just a yellow circle that responds to certain keys.  Right now, Pacman is able to move anywhere he wants on the screen.  Last time I checked Pacman was constrained to only be able to move within a maze.  In the next section I'm going to show you how to constrain his movement by having him move on a predefined grid.</p>
    </div> <!--End of the main container-->

    <hr />

    <div class="container">
      <h2>File Structure</h2>
      <ul>
	<li>Pacman</li>
	<ul>
	  <li>constants.py</li>
	  <li>gamecontrol.py</li>
	  <li>pacman.py</li>
	  <li>stacks.py</li>
	  <li>vectors.py</li>
	</ul>
      </ul>
    </div>

    </div>
    <div class="buffer"></div>
    <footer>
      <div class="bottomNav">
	<ul>
	  <li><a href="section0.html">Previous</a></li>
	  <li><a href="#top">Top</a></li>
	  <li><a href="section2.html">Next</a></li>
	</ul>
      </div>
    </footer>
  </body>
</html>
