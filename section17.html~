<!DOCTYPE html>
<html>
  <head>
    <title>Pacman Code</title>
    <link rel="stylesheet" href="css/style.css">
    <link href='https://fonts.googleapis.com/css?family=Poppins|Press+Start+2P' rel='stylesheet' type='text/css'>  
  </head>

  <body>
    <div id="top"></div>
    <div class="page">
      <div class="navigation">
	<header>
	  <h1><img src="Images/pacman.png"/>... Pacman Code ...<img src="Images/pacman.png"/></h1>
	  <hr/>
	  <nav>
	    <ul>
	      <li><a href="index.html">Home</a></li>
	      <li><a href="code.html">Code</a></li>
	      <li><a href="clones.html">Clones</a></li>
	      <li><a href="about.html">About</a></li>
	      <li><a href="contact.html">Contact</a></li>
	    </ul>
	  </nav>
	</header>
      </div><!--End of navigation-->
    <hr/>

    <h2>Section 16: Adding in the Ghosts</h2>
    <div class="container">
      <h3>Setup</h3>
      <p>Well we got everything working for some generic ghost.  Now let's add in three more ghosts and give them all names.  We'll also make all four ghosts unique in their own way.  </p>
      <p>In Pacman, the four ghosts are named Blinky, Pinky, Inky, and Clyde.  We can name our ghosts whatever we want but we'll stick to history.  The only visual difference between the ghosts is their color.  Blinky is RED, Pinky is PINK, Inky is TEAL, and Clyde is ORANGE.  Again, we can make them any color we want, but we'll stick to how they originally were.  We'll initially deal with the ghosts as a whole, then get more intimate and deal with each one individually.</p>
    </div><!--End of Setup container-->


    <div class="container">
      <p>The first step in adding in all of the ghosts is to just create four Ghost objects.  However, we'll take it a step further initially.  Whenever we deal with groups of objects we've been putting them in another object.  For instance with the pellets, we group all of the Pellet objects into a PelletGroup object.  Same thing with the Node objects.  Let's do the same thing for the ghosts.  We'll create a GhostGroup class and place all of the ghosts in there.  That way we'll only have to deal with one class.  The ghosts all do the same thing anyways, just slighly different from each other.  </p>
      <h3>Modify the <span class="filenames">ghosts.py</span> file</h3>
      <h4>Create a new class called <span class="cn">GhostGroup</span></h4>
      <div class="pseudoCode">
	<p></p>
      </div>
      <div class="codeText">
	<code>
	  class GhostGroup(object):
	  <div class="tabLeft">
	    def __init__(self, nodes, level):
	    <div class="tabLeft">
	      self.nodes = nodes<br>
	      self.level = level<br>
	      self.ghosts = []
	      for i in range(4):
	      <div class="tabLeft">
		self.ghosts.append(Ghost(nodes, level))
	      </div>
	    </div>
	    <br>
	    def __iter__(self):
	    <div class="tabLeft">
	      return iter(self.ghosts)
	    </div>
	    <br>
	    def update(self, dt, pacman):
	    <div class="tabLeft">
	      for ghost in self:
	      <div class="tabLeft">
		ghost.update(dt, pacman)
	      </div>
	    </div>
	    <br>
	    def setFreightMode(self):
	    <div class="tabLeft">
	      for ghost in self:
	      <div class="tabLeft">
		ghost.setFreightMode()
	      </div>
	    </div>
	    <br>
	    def anyInFreight(self):
	    <div class="tabLeft">
	      for ghost in self:
	      <div class="tabLeft">
		if ghost.mode.name == "FREIGHT":
		<div class="tabLeft">
		  return True
		</div>
	      </div>
	      return False
	    </div>
	    <br>
	    def anyInSpawn(self):
	    <div class="tabLeft">
	      for ghost in self:
	      <div class="tabLeft">
		if ghost.mode.name == "SPAWN":
		<div class="tabLeft">
		  return True
		</div>
	      </div>
	      return False
	    </div>
	    <br>
	    def anyInFreightOrSpawn(self):
	    <div class="tabLeft">
	      for ghost in self:
	      <div class="tabLeft">
		if ghost.mode.name == "FREIGHT" or ghost.mode.name == "SPAWN":
		<div class="tabLeft">
		  return True
		</div>
	      </div>
	      return False
	    </div>
	    <br>
	    def getGhost(self, name):
	    <div class="tabLeft">
	      for ghost in self:
	      <div class="tabLeft">
		if ghost.name == name:
		<div class="tabLeft">
		  return ghost
		</div>
	      </div>
	      return None
	    </div>
	    <br>
	    def render(self,screen):
	    <div class="tabLeft">
	      for ghost in self:
	      <div class="tabLeft">
		ghost.render(screen)
	      </div>
	    </div>
	  </div>
	</code>
      </div>
    </div><!--End of container-->
    
    <div class="container">
      <h3>Modify the <span class="filenames">gamecontrol.py</span> file</h3>
      <div class="pseudoCode">
	<p>At the start of the file import <span class="cn">GhostGroup</span> instead of <span class="cn">Ghost</span>.</p>
      </div>
      <div class="codeText">
	<code>
	  from ghosts import GhostGroup
	</code>
      </div>
      <hr/>

      <h4>Modify the <span class="mn">startGame</span> method</h4>
      <div class="pseudoCode">
	<p>Delete the <span class="cn">Ghost</span> object and replace it with this.</p>
      </div>
      <div class="codeText">
	<code>
	  self.ghosts = GhostGroup(self.nodes, self.level)
	</code>
      </div>
      <hr/>

      <h4>Modify the <span class="mn">update</span> method</h4>      
      <div class="pseudoCode">
	<p>Replace the call to update the <span class="cn">Ghost</span> object with this in the same location.</p>
      </div>
      <div class="codeText">
	<code>
	  self.ghosts.update(dt, self.pacman)
	</code>
      </div>
      <hr/>

      <h4>Modify the <span class="mn">checkPelletEvents</span> method</h4>
      <div class="pseudoCode">
	<p>This has a couple of calls to the <span class="cn">Ghost</span> object so we replace them all with the calls to the <span class="cn">GhostGroup</span> class instead.  </p>
      </div>
      <div class="codeText">
	<code>
	  if pellet.name == "powerpellet":
	  <div class="tabLeft">
	    self.ghosts.setFreightMode()
	  </div>
	  <p>...</p>
	  if self.ghosts.anyInFreightOrSpawn():
	  <div class="tabLeft">
	    self.pacman.boostSpeed()
	  </div>
	  <p>...</p>
	  if self.ghosts.anyInFreightOrSpawn():
	  <div class="tabLeft">
	    self.pacman.boostSpeed()
	  </div>
	  <p>...</p>
	</code>
      </div>
      <hr/>

      <h4>Modify the <span class="mn">restartLevel</span> method</h4>
      <div class="pseudoCode">
	<p>As before, just replace the previous call to the <span class="cn">Ghost</span> object with this in the same location.</p>
      </div>
      <div class="codeText">
	<code>
	  self.ghosts = Ghost(self.nodes, self.level)
	</code>
      </div>
      <hr/>

      <h4>Modify the <span class="mn">render</span> method</h4>
      <div class="pseudoCode">
	<p>As before, just replace the previous call to the <span class="cn">Ghost</span> object with this in the same location.</p>	
      </div>
      <div class="codeText">
	<code>
	  self.ghosts.render(self.screen)
	</code>
      </div>
    </div><!--End of container-->

    
    <div class="container">
      <p>If you were to run the code above you may be surprised to only see one ghost moving around the screen.  But didn't we just create four ghosts?  We did, but the four ghosts we created were exact duplicates of each other.  So they're going to think the same and make the same decisions on where to go.  So there are four ghosts there, they're just stacked on top of each other.  If we want to show the four ghosts separated (and we do) we'll have to give them all different personalities or basically just different goals.  The easiest way is to give them all different scatter goals.  In doing so we're also going to create a class for each ghost.  </p>
      <hr/>
      <h3>Modify the <span class="filenames">ghosts.py</span> file</h3>
      <div class="pseudoCode">
	<p>We're going to create a class for each ghost.  Each class right now only differs by the name, color, and scatter goal of the ghosts.  We'll add more to these classes as we flesh out their personalities.  Notice that each of the classes inherits from the <span class="cn">Ghost</span> class.  The only methods we're going to overwrite for each ghost is the <span class="mn">setScatterGoal</span> method.  We'll overwrite other methods as they become neccessary.</p>
      </div>
      <div class="codeText">
	<code>
	  class Blinky(Ghost):
	  <div class="tabLeft">
	    def __init__(self, nodes, level):
	    <div class="tabLeft">
	      Ghost.__init__(self, nodes, level)<br>
	      self.name = "blinky"
	      self.color = RED
	    </div>
	    <br>
	    def setScatterGoal(self):
	    <div class="tabLeft">
	      self.goal = Vector2D(WIDTH*NCOLS, 0)
	    </div>
	  </div>
	  <br><br>

	  class Pinky(Ghost):
	  <div class="tabLeft">
	    def __init__(self, nodes, level):
	    <div class="tabLeft">
	      Ghost.__init__(self, nodes, level)<br>
	      self.name = "pinky"
	      self.color = PINK
	    </div>
	    <br>
	    def setScatterGoal(self):
	    <div class="tabLeft">
	      self.goal = Vector2D()
	    </div>
	  </div>
	  <br><br>

	  class Inky(Ghost):
	  <div class="tabLeft">
	    def __init__(self, nodes, level):
	    <div class="tabLeft">
	      Ghost.__init__(self, nodes, level)<br>
	      self.name = "inky"
	      self.color = TEAL
	    </div>
	    <br>
	    def setScatterGoal(self):
	    <div class="tabLeft">
	      self.goal = Vector2D(0, HEIGHT*NROWS)
	    </div>
	  </div>
	  <br><br>

	  class Clyde(Ghost):
	  <div class="tabLeft">
	    def __init__(self, nodes, level):
	    <div class="tabLeft">
	      Ghost.__init__(self, nodes, level)<br>
	      self.name = "clyde"
	      self.color = ORANGE
	    </div>
	    <br>
	    def setScatterGoal(self):
	    <div class="tabLeft">
	      self.goal = Vector2D(WIDTH*NCOLS, HEIGHT*NROWS)
	    </div>
	  </div>
	  <br>

	</code>
      </div>
      <hr/>

      <h4>Modify the <span class="cn">GhostGroup</span> class</h4>
      <h4>Modify the <span class="mn">__init__</span> method</h4>
      <div class="pseudoCode">
	<p>Instead of creating four exact duplicates of the <span class="cn">Ghost</span> class we'll create objects from the classes we just made.</p>
      </div>
      <div class="codeText">
	<code>
	  self.ghosts = []<br>
	  self.ghosts.append(Blinky(nodes, level))<br>
	  self.ghosts.append(Pinky(nodes, level))<br>
	  self.ghosts.append(Inky(nodes, level))<br>
	  self.ghosts.append(Clyde(nodes, level))
	</code>
      </div>

    </div><!--End of container-->



    <div class="container">
      <p>Now if you run the code you'll notice that they all split off at the start of the level to go to each of their respective corners.  This is good and we have four distinct ghosts that are moving on their own.  However, they all still have the same personality.  That is, during CHASE mode they all try to get to Pacman's location.  This is fine and will make for a challenging game, but we want to make all four ghosts unique.  If you've ever played Pacman, then you'd swear that the ghosts are working together to get you.  They're actually not, but we can make it look that way by modifying their goals while in CHASE mode.  Let's take each ghost one-by-one and explain how we calculate their CHASE goals.  </p>
      <hr/>
      <h3>Blinky</h3>
      <p>We don't need to do a lot of explaining here since this is what we've been using as the CHASE goal on all of the ghosts so far.  Blinky is the ghost that seems to follow Pacman around the maze always right on his tail.  We do this by making his CHASE goal Pacman's position.  So wherever Pacman is, Blinky will try to get there.  But Pacman's position is always changing, so Blinky's CHASE goal is always changing as well.  We don't need to make any modifications to the code since this is the default CHASE goal.</p>
      <h4>Modify the <span class="cn">Ghost</span> class</h4>
      <h4>Modify the <span class="mn">setChaseGoal</span> method</h4>
      <div class="pseudoCode">
	<p>This was the method we were using for all of the ghosts previously since it was the default mode.  We don't have to overwrite it in the <span class="cn">Blinky</span> class like we will for the other ghost classes, but we need to modify it to include the blinky=None input.  We are adding this because Inky needs it and it's easier than creating a special method just for Inky.</p>
      </div>
      <div class="codeText">
	<code>
	  def setChaseGoal(self, pacman, blinky=None):
	  <div class="tabLeft">
	    self.goal = pacman.position
	  </div>
	</code>
      </div>
      <hr/>

      <h3>Pinky</h3>
      <p>Pinky's CHASE goal is similar to Blinky's except instead of targeting Pacman directly, Pinky targets 4 grid units in front of Pacman.  So Pinky needs to know Pacman's position and direction.  This type of goal gives the impression that Pinky and Blinky are working together to trap Pacman as Blinky attacks from behind and Pinky attacks from the front.</p>
      <h4>Modify the <span class="cn">Pinky</span> class</h4>
      <h4>Overwrite the <span class="mn">setChaseGoal</span> method</h4>
      <div class="pseudoCode">
	<p>As discussed above, this is how we calculate Pinky's CHASE goal.  </p>
      </div>
      <div class="codeText">
	<code>
	  def setChaseGoal(self, pacman, blinky=None):
	  <div class="tabLeft">
	    self.goal = pacman.position + pacman.direction * WIDTH * 4
	  </div>
	</code>
      </div>
      <hr/>

      <h3>Inky</h3>
      <p>Inky has the most complex method of determining his CHASE goal.  He needs to know Pacman's position, direction, and also Blinky's position.  We determine his goal by first taking Pacman's position and direction.  We then extend a line from Pacman to two grid units in front of him.  We then draw a line from Blinky's position to the end of the first line.  We then double the length of that line that we drew from Blinky.  The location that line points to is where we want to send Inky.   </p>
      <h4>Modify the <span class="cn">Inky</span> class</h4>
      <h4>Overwrite the <span class="mn">setChaseGoal</span> method</h4>
      <div class="pseudoCode">
	<p>As discussed above, this is how we calculate Inky's CHASE goal.  Inky needs to know Blinky's position.</p>
      </div>
      <div class="codeText">
	<code>
	  def setChaseGoal(self, pacman, blinky=None):
	  <div class="tabLeft">
	    vec1 = pacman.position + pacman.direction * WIDTH * 2<br>
	    vec2 = (vec1 - blinky.position) * 2<br>
	    self.goal = blinky.position + vec2
	  </div>
	</code>
      </div>
      <hr/>

      <h3>Clyde</h3>
      <p>Clyde kind of has a double personality when he is in CHASE mode.  His goal depends on how close he is to Pacman.  If Clyde is more than 8 grid units away from Pacman, the Clyde acts like Blinky in that his CHASE goal is Pacman's location.  If Clyde is within 8 grid units away from Pacman, then he will retreat back to his corner so he acts like he is in SCATTER mode.  So Clyde makes a run for Pacman when he is far away, then when he gets close to Pacman retreats, and just repeats this behavior over and over.</p>
      <h4>Modify the <span class="cn">Clyde</span> class</h4>
      <h4>Overwrite the <span class="mn">setChaseGoal</span> method</h4>
      <div class="pseudoCode">
	<p>As discussed above, this is how we calculate Clyde's CHASE goal.</p>
      </div>
      <div class="codeText">
	<code>
	  def setChaseGoal(self, pacman, blinky=None):
	  <div class="tabLeft">
	    d = pacman.position - self.position<br>
	    ds = d.magnitudeSquared()<br>
	    if ds &lt= (WIDTH * 8)**2:
	    <div class="tabLeft">
	      self.setScatterGoal()
	    </div>
	    else:
	    <div class="tabLeft">
	      self.goal = pacman.position
	    </div>
	  </div>
	</code>
      </div>
      <hr/>

      <p></p>
      <h4>Modify the <span class="cn">GhostGroup</span> class</h4>
      <h4>Modify the <span class="mn">update</span> method</h4>
      <div class="pseudoCode">
	<p>We need to get the Blinky object since Inky needs to know blinky's position.  So we get the Blinky object and pass it into the update method for all of the ghosts.  So, we'll have to go and update that method as well.</p>
      </div>
      <div class="codeText">
	<code>
	  def update(self, dt, pacman):
	  <div class="tabLeft">
	    blinky = self.getGhost("blinky")<br>
	    for ghost in self:
	    <div class="tabLeft">
	      ghost.update(dt, pacman, blinky)
	    </div>
	  </div>
	</code>
      </div>
      <hr/>
      
      <h4>Modify the <span class="cn">Ghost</span> class</h4>
      <h4>Modify the <span class="mn">update</span> method</h4>
      <div class="pseudoCode">
	<p>Not a lot to explain here, just make the indicated changes discussed above.</p>
      </div>
      <div class="codeText">
	<code>
	  def update(self, dt, pacman, blinky):
	  <div class="tabLeft">
	    <p>...</p>
	    if self.mode.name == "CHASE":
	    <div class="tabLeft">
	      self.setChaseGoal(pacman, blinky)
	    </div>
	    <p>...</p>
	  </div>
	</code>
      </div>
      <hr/>
      
    </div><!--End of container-->




    
    
    <div class="container">  
      <h3>Conclusion</h3>
      <p>Now we have all of the ghosts moving like we want them to move.  They all have their own unique AI that will differentiate them from each other.  Playing the game should really feel like Pacman now without the graphics.  There are some things that you'll notice if you're really familiar with Pacman that are different.  We'll discuss those issues in a bit.  In the next section we'll take care of the last major bit which is giving the ghosts their own starting points.</p>

    </div> <!--End of the conclusion container-->
    <hr />

    <div class="container">
      <h2>File Structure</h2>
      <ul>
	<li>Pacman</li>
	<ul>
	  <li>constants.py</li>
	  <li>entities.py</li>
	  <li>fruit.py</li>
	  <li>gamecontrol.py</li>
	  <li>ghosts.py</li>
	  <li>home.txt</li>
	  <li>maze1.txt</li>
	  <li>nodes.py</li>
	  <li>pacman.py</li>
	  <li>pellets.py</li>
	  <li>stacks.py</li>
	  <li>vectors.py</li>
	</ul>
      </ul>
    </div><!--End of File Structure container-->
    </div><!--End of Page container-->


    <div class="buffer"></div>
    <footer>
      <div class="bottomNav">
	<ul>
	  <li><a href="section16.html">Previous</a></li>
	  <li><a href="#top">Top</a></li>
	  <li><a href="section18.html">Next</a></li>
	</ul>
      </div>
    </footer>
  </body>
</html>
