<!DOCTYPE html>
<html>
  <head>
    <title>Pacman Code</title>
    <link rel="stylesheet" href="css/style.css">
    <link href='https://fonts.googleapis.com/css?family=Poppins|Press+Start+2P' rel='stylesheet' type='text/css'>  
  </head>

  <body>
    <div id="top"></div>
    <div class="page">
      <div class="navigation">
	<header>
	  <h1><img src="Images/pacman.png"/>... Pacman Code ...<img src="Images/pacman.png"/></h1>
	  <hr/>
	  <nav>
	    <ul>
	      <li><a href="index.html">Home</a></li>
	      <li><a href="code.html">Code</a></li>
	      <li><a href="clones.html">Clones</a></li>
	      <li><a href="about.html">About</a></li>
	      <li><a href="contact.html">Contact</a></li>
	    </ul>
	  </nav>
	</header>
      </div><!--End of navigation-->
    <hr/>

    <h2>Section 7: Giving the Ghosts AI</h2>
    <div class="container">
      <h3>Setup</h3>
      <p>Right now we have one ghost that moves around the maze in a random fashion.  This is fine, but we actually want to give the ghosts some sort of intelligence.  The main secret behind this is that we just need to give the ghosts a goal to reach.  The goal that we want the ghosts to reach is just a (x, y) position.  It doesn't even have to be reachable, and usually it won't be reachable.  Let's give our ghost a goal to reach to see how this works.</p>
    </div><!--End of Setup container-->


    <div class="container">
      <h3>Modify the <span class="cn">Ghost</span> class</h3>
      <h4>Modify the <span class="mn">__init__</span> method</h4>
      <div class="pseudoCode">
	<p>We need to add a goal vector to the <span class="cn">Ghost</span> class.  Right now we'll set the goal to be the origin of the screen.  This is unreachable, but that shouldn't matter.</p>
      </div><!--End of pseudoCode-->
      <div class="codeText">
	<code>
	  def __init__(self, nodes):
	  <div class="tabLeft">
	    <p>...</p>
	    self.goal = Vector2D()
	  </div>
	</code>
      </div><!--End of codeText-->
      <hr/>
      
      <h4>Create a new method called <span class="mn">getClosestDirection</span></h4>
      <div class="pseudoCode">
	<p>It is easiest to understand what this method does by referring to the images on the right.  </p>
      </div>
      <div class="codeText">
	<code>
	  def getClosestDirection(self, validDirections):
	  <div class="tabLeft">
	    distances = []<br>
	    for key in validDirections:
	    <div class="tabLeft">
	      diffVec = self.node.position + key*WIDTH - self.goal<br>
	      distances.append(diffVec.magnitudeSquared())
	    </div>
	    return distances.index(min(distances))
	  </div>
	</code>
      </div>
      <hr/>
      <h4>Modify the <span class="mn">moveBySelf</span> method</h4>
      <div class="pseudoCode">
	<p>Here we just need to get rid of the call to the <span class"mn">randomDirection</span> method and replace it with the call to the <span class="mn">getClosestDirection</span> method.</p>
      </div>
      <div class="codeText">
	<code>
	  def moveBySelf(self):
	  <div class="tabLeft">
	    if self.overshotTarget():
	    <div class="tabLeft">
	      <p>...</p>
	      self.direction = self.getClosestDirection(validDirections)<br>
	      self.target = self.node.neighbors[self.direction]<br>
	      self.setPosition()
	    </div>
	  </div>
	</code>
      </div>
      
    </div><!--End of container-->
    
    <div class="container">
      <div class="pseudoCode">
      </div><!--End of pseudoCode-->

      <div class="codeText">
	<code>
	</code>
      </div><!--End of codeText-->
    </div><!--End of container-->

    <div class="container">
      <div class="pseudoCode">
      </div><!--End of pseudoCode-->

      <div class="codeText">
	<code>
	</code>
      </div><!--End of codeText-->
    </div><!--End of container-->

    <div class="container">
      <div class="pseudoCode">
      </div><!--End of pseudoCode-->

      <div class="codeText">
	<code>
	</code>
      </div><!--End of codeText-->
    </div><!--End of the code container-->
    
    <div class="container">
      
      <div class="pseudoCode">
      </div><!--End of pseudocode-->
   
      <div class="codeText">
	<code>
	</code>
      </div><!--End of codeText-->
    </div><!--End of the container-->

    <div class="container">
      <div class="pseudoCode">
      </div><!--End of pseudoCode-->
      <div class="codeText">
	<code>
	</code>
      </div><!--End of codeText-->
    </div><!--End of container-->
    
    <div class="container">  
      <h3>Conclusion</h3>

    </div> <!--End of the conclusion container-->
    <hr />

    <div class="container">
      <h2>File Structure</h2>
      <ul>
	<li>Pacman</li>
	<ul>
	  <li>constants.py</li>
	  <li>entities.py</li>
	  <li>gamecontrol.py</li>
	  <li>ghosts.py</li>
	  <li>maze1.txt</li>
	  <li>nodes.py</li>
	  <li>pacman.py</li>
	  <li>stacks.py</li>
	  <li>vectors.py</li>
	</ul>
      </ul>
    </div><!--End of File Structure container-->
    </div><!--End of Page container-->


    <div class="buffer"></div>
    <footer>
      <div class="bottomNav">
	<ul>
	  <li><a href="section6.html">Previous</a></li>
	  <li><a href="#top">Top</a></li>
	  <li><a href="section8.html">Next</a></li>
	</ul>
      </div>
    </footer>
  </body>
</html>
