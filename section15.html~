<!DOCTYPE html>
<html>
  <head>
    <title>Pacman Code</title>
    <link rel="stylesheet" href="css/style.css">
    <link href='https://fonts.googleapis.com/css?family=Poppins|Press+Start+2P' rel='stylesheet' type='text/css'>  
  </head>

  <body>
    <div id="top"></div>
    <div class="page">
      <div class="navigation">
	<header>
	  <h1><img src="Images/pacman.png"/>... Pacman Code ...<img src="Images/pacman.png"/></h1>
	  <hr/>
	  <nav>
	    <ul>
	      <li><a href="index.html">Home</a></li>
	      <li><a href="code.html">Code</a></li>
	      <li><a href="clones.html">Clones</a></li>
	      <li><a href="about.html">About</a></li>
	      <li><a href="contact.html">Contact</a></li>
	    </ul>
	  </nav>
	</header>
      </div><!--End of navigation-->
    <hr/>

    <h2>Section 14: Restricting Movement and Other Things</h2>
    <div class="container">
      <h3>Setup</h3>
      <p><img src="Images/restrictnodes.png" alt=""/>Right now all of the nodes are connected together which means that Pacman and the ghost can visit each and every node whenever they want.  However, we need to restrict the movement of Pacman and the ghost when it comes to certain nodes and at certain times.  For example, Pacman can never enter the ghost's home nodes, so we'll need to tell him that those nodes are off limits somehow.  The ghost also shouldn't be allowed to enter the home nodes unless he is in SPAWN mode.  There are also some nodes that only allow one-way movement for the ghosts.  Those are represented by the blue nodes in the image on the right.  When a ghost enters these nodes, he is not allowed to move in the UP direction.  These nodes have no effect on Pacman.  Some nodes also have speed effects on the ghosts.  Well, actually the only nodes that have speed effects on the ghosts are the portal nodes.  Whenever a ghost is moving towards or away from a portal node, then the ghost should be moving at 50% of this max speed.  It's a great way for Pacman to escape if the ghost is following close behind him.  Speaking of slowing down, whenever Pacman is eating pellets his speed is decreased a bit as well.  If he isn't eating pellets then he can move at his max speed, but when he eats pellets he moves slightly slower.  I think that's enough stuff to tackle for this section.  Once we're finished with this section we should finally be able to add the other three ghosts.  </p>
    </div><!--End of Setup container-->


    <div class="container">
      <h3>Restrict Home Entrance</h3>
      <h4>Modify the <span class="filenames">constants.py</span> file</h4>
 
       <div class="pseudoCode">
	 <p>Since the nodes that we need to use to restrict movement are maze dependent we'll add them to the MAZEDATA dictionary.  I know that we're still hard-coding them in, and we'll fix that later.  But for now, it's fine.  The <span class="str">"home"</span> is the node that defines the ghost home entrance.  We'll also add in the four nodes that prevent the ghosts from moving UP.  These are the four blue nodes in the image from before.  We can also add other dictionaries like <span class="str">"restrictDown"</span> or <span class="str">"restrictLeft"</span> or whatever you want to call them if we want to restrict those directions.  We won't need to at least in the first maze, though, so just the UP direction.</p>
      </div>
      <div class="codeText">
	<code>
	  MAZEDATA[0]["home"] = (216, 272)<br>
	  MAZEDATA[0]["restrictUp"] = {0:(12*WIDTH, 14*HEIGHT), 1:(15*WIDTH, 14*HEIGHT), 2:(12*WIDTH, 26*HEIGHT), 3:(15*WIDTH, 26*HEIGHT)}
	</code>
      </div>

      <hr/>
      
      <h4>Modify the <span class="filenames">nodes.py</span> file</h4>
      <h4>Modify the <span class="cn">Node</span> <span class="mn">__init__</span> method</h4>
      <div class="pseudoCode">
	<p></p>
      </div>
      <div class="codeText">
	<code>
	  def __init__(self, level):
	  <div class="tabLeft">
	    <p>...</p>
	    self.home = False
	  </div>
	</code>
      </div>

      <hr/>
      <h4>Modify the <span class="mn">moveHomeNodes</span> method</h4>
      <div class="pseudoCode">
	<p></p>
      </div>
      <div class="codeText">
	<code>
	  def moveHomeNodes(self):
	  <div class="tabLeft">
	    <p>...</p>
	    for node in self.homeList:
	    <div class="tabLeft">
	      <p>...</p>
	      if node.position.toTuple() == MAZEDATA[self.level]["home"]:
	      <div class="tabLeft">
		node.home = True
	      </div>
	    </div>
	  </div>
	</code>
      </div>

      <hr/>
      
      <h4>Modify the <span class="filenames">pacman.py</span> file</h4>
      <h4>Modify the <span class="mn">moveByKey</span> method</h4>
      <div class="pseudoCode">
	<p>When Pacman overshoots a node we just need to add the check to make sure that the node isn't the ghost's home node.  If it is then any key presses from the player won't register.  So Pacman is now forever prevented from moving into the ghost's home.  </p>
      </div>
      <div class="codeText">
	<code>
	  def moveByKey(self):
	  <div class="tabLeft">
	    if self.direction is STOP:
	    <div class="tabLeft">
	      <p>...</p>
	    </div>
	    else:
	    <div class="tabLeft">
	      <p>...</p>
	      if self.overshotTarget():
	      <div class="tabLeft">
		<p>...</p>
		if self.node.neighbors[direction] is not None and not self.node.home:
		<div class="tabLeft">
		  <p>...</p>
		  <!--if not self.node.home and direction is not DOWN:
		  <div class="tabLeft">
		    self.target=  self.node.neighbors[direction]
		    <p>...</p>
		  </div>-->
		</div>
	      </div>
	    </div>
	  </div>
	</code>
      </div>
      <hr/>

      <h4>Modify the <span class="filenames">ghosts.py</span> file</h4>
      <h4>Modify the <span class="mn">getValidDirections</span> method</h4>
      <div class="pseudoCode">
	<p>What's nice about the ghost is that whenever we want to control his movement, we just need to add or remove directions in this method.  In this case we are checking to see if he has landed on the <span class="str">"home"</span> node that we defined earlier.  If he has and the DOWN direction is a valid direction, then we just remove the DOWN direction as a valid direction.  We also need to check if the ghost is in SPAWN mode or not.  If he is in SPAWN mode, then we want to give him access to the home, but restrict him otherwise.  </p>
      </div>
      <div class="codeText">
	<code>
	  def getValidDirections(self):
	  <div class="tabLeft">
	    <p>...</p>
	    if self.node.home and DOWN in validDirections and self.mode.name != "SPAWN":
	    <div class="tabLeft">
	      validDirections.remove(DOWN)
	    </div>
	  </div>
	</code>
      </div>

    </div><!--End of container-->


      
    <div class="container">
      <h3>Restrict the Ghost UP Movement</h3>
      <h4>Modify the <span class="filenames">nodes.py</span> file</h4>
      <h4>Modify the <span class="mn">__init__</span> in the <span class="cn">Node</span> class</h4>
      <div class="pseudoCode">
	<p>Just need to add this to the node class in preparation for the next step.</p>
      </div>
      <div class="codeText">
	<code>
	  def __init__(self, row, column, respawn=False):
	  <div class="tabLeft">
	    <p>...</p>
	    self.nowayUp = False
	  </div>
	</code>
      </div>
      <hr/>

      <h4>Modify the <span class="cn">NodeGroup</span> class</h4>
      <h4>Create a new method called <span class="mn">checkIfOnRestriction</span></h4>
      <div class="pseudoCode">
	<p>We want to loop through the positions that we added to the MAZEDATA dictionary and see if the node we're currently working on is one of those.</p>
      </div>
      <div class="codeText">
	<code>
	  def checkIfOnRestriction(self, node):
	  <div class="tabLeft">
	    if node is not None:
	    <div class="tabLeft">
	      for tup in MAZEDATA[self.level]["restrictUp"].values():
	      <div class="tabLeft">
		if node.position.x == tup[0] and node.position.y == tup[1]:
		<div class="tabLeft">
		  node.nowayUp = True
		</div>
	      </div>
	    </div>
	  </div>
	</code>
      </div>

      <hr/>

      <h4>Modify the <span class="mn">getPathNode</span> method</h4>
      <div class="pseudoCode">
	<p>This is where we call the method we just created above.</p>
      </div>
      <div class="codeText">
	<code>
	  def getPathNode(self, direction, row, col, nodeList):
	  <div class="tabLeft">
	    tempNode = self.followPath(direction, row, col)<br>
	    self.checkIfOnRestriction(tempNode)<br>
	    return self.getNodeFromNode(tempNode, nodeList)
	  </div>
	</code>
      </div>


      <h4>Modify the <span class="filenames">ghosts.py</span> file</h4>
      <h4>Modify the <span class="mn">getValidDirections</span> method</h4>
      <div class="pseudoCode">
	<p>We just need to add this at the end of this method.</p>
      </div>
      <div class="codeText">
	<code>
	  def getValidDirections(self):
	  <div class="tabLeft">
	    <p>...</p>
	    if self.node.nowayUp and UP in validDirections:
	    <div class="tabLeft">
	      validDirections.remove(UP)
	    </div>
	  </div>
	</code>
      </div>
      <hr/>


    </div><!--End of container-->



    <div class="container">
      <h3>Modify the Ghost speed on the Portal Nodes</h3>
      <h4>Modify the <span class="filenames">ghosts.py</span> file</h4>
      <h4>Modify the <span class="mn">update</span> method</h4>
      <div class="pseudoCode">
	<p>We may want to modify the speed further in the future so let's put the speed modification stuff in its own method.  </p>
      </div>
      <div class="codeText">
	<code>
	  def update(self, dt, pacman):
	  <div class="tabLeft">
	    speedMod = self.modifySpeed()<br>
	    self.position += self.direction * speedMod * dt
	    <p>...</p>
	  </div>
	</code>
      </div>
      <hr/>

      <h4>Create a new method called <span class="mn">modifySpeed</span></h4>
      <div class="pseudoCode">
	<p>We check to see if the ghost is moving towards or away from a portal node.  We want to cut his speed in half if he is.  Otherwise we just follow the speed as set by the mode he is currently in.</p>
      </div>
      <div class="codeText">
	<code>
	  def modifySpeed(self):
	  <div class="tabLeft">
	    if self.node.portalNode is not None or self.target.portalNode is not None:
	    <div class="tabLeft">
	      return self.speed / 2.0
	    </div>
	    return self.speed * self.mode.speedMult
	  </div>
	</code>
      </div>
      <hr/>



    </div><!--End of container-->



    <div class="container">
      <h3>Increase / Decrease Pacman's Speed</h3>
      <p>Pacman moves slightly slower when he is eating pellets.  Right now this is the only time that we modify Pacman's speed.  We can easily check to see when he collides with a pellet and use that check to reduce his speed, then return his speed to normal as soon as he isn't eating any pellets, but that would result in a very choppy, weird moving Pacman.  Believe me, that was the first thing I tried.  We would also like to increase his speed when the ghosts are in FREIGHT mode.  The pellets also do not slow him down when the ghosts are in FREIGHT mode.</p>

      <h4>Modify the <span class="filenames">constants.py</span> file</h4>
      <div class="pseudoCode">
	<p>We should have added this earlier, but this is a speed that never changes for Pacman or the ghosts.  You can say that this is their base speed.  If we want them to go slower or faster, then we use this to modify their speeds.  </p>
      </div>
      <div class="codeText">
	<code>
	    MAXSPEED = 100
	</code>
      </div>
      <hr/>

      <h4>Modify the <span class="filenames">pacman.py</span> file</h4>
      <h4>Create two new methods</h4>
      <div class="pseudoCode">
	<p>These three methods will allow us to just set Pacman's speed to normal, slower, or a bit faster when we need it.</p>
      </div>
      <div class="codeText">
	<code>
	  def boostSpeed(self):
	  <div class="tabLeft">
	    self.speed = MAXSPEED * 1.5
	  </div>
	  <br>
	  def normalSpeed(self):
	  <div class="tabLeft">
	    self.speed = MAXSPEED
	  </div>
	  <br>
	  def reduceSpeed(self):
	  <div class="tabLeft">
	    self.speed = MAXSPEED * 0.8
	  </div>
	</code>
      </div>
      <hr/>

      <h4>Modify the <span class="filenames">gamecontrol.py</span> file</h4>
      <h4>Create a new method called <span class="mn">checkPacmanEvents</span></h4>
      <div class="pseudoCode">
	<p>It makes sense to give Pacman his own method for checking events.  We have one for the ghost and the pellets after all.  Right now we're just checking to see if the ghost happens to be in FREIGHT mode.  If he is, then we increase Pacman's speed.  If not, then we set it back to normal.</p>
      </div>
      <div class="codeText">
	<code>
	  def checkPacmanEvents(self):
	  <div class="tabLeft">
	    if self.ghost.mode.name == "FREIGHT":
	    <div class="tabLeft">
	      self.pacman.boostSpeed()
	    </div>
	    else:
	    <div class="tabLeft">
	      self.pacman.normalSpeed()
	    </div>
	  </div>
	</code>
      </div>
      
      <hr/>
      <h4>Modify the <span class="mn">update</span> method</h4>
      <div class="pseudoCode">
	<p>We check the Pacman events along with the other guys.  Notice also that I'm passing in the time into all of the event checks.  So we need to also modify those methods to expect the time value.  We'll need it in the future, might as well just add it now.</p>
      </div>
      <div class="codeText">
	<code>
	  def update(self):
	  <div class="tabLeft">
	    dt = self.clock.tick(30) / 1000.0<br>
	    if not self.paused:
	    <div class="tabLeft">
	      <p>...</p>
	      self.checkPacmanEvents(dt)<br>
	      self.checkGhostEvents(dt)<br>
	      self.checkPelletEvents(dt)<br>
	    </div>
	  </div>
	</code>
      </div>

      <hr/>
      <h4>Modify the <span class="mn">__init__</span> method</h4>
      <div class="pseudoCode">
	<p>Just add this into the method.  This will allow us to check to see if Pacman is idling.  Pacman is idling when he is not eating pellets even if he is moving.  </p>
      </div>
      <div class="codeText">
	<code>
	  self.idleTimer = 0
	</code>
      </div>


      <hr/>
      <h4>Modify the <span class="mn">checkPelletEvents</span> method</h4>
      <div class="pseudoCode">
	<p>If Pacman has eaten a pellet and the ghost is not in FREIGHT mode, then we reduce Pacman's speed.  We have an idleTimer that we use to check to see how long Pacman has not eaten any pellets.  If that timer exceeds a half a second, then we bring his speed back to normal.  This way we reduce the choppiness that would happen if we were constantly telling him to reduce speed, normal speed, reduce speed, normal speed, ... etc everytime he eats a pellet.  There are other things we'll need the idleTimer for in the future.</p>
      </div>
      <div class="codeText">
	<code>
	  def checkPelletEvents(self, dt):
	  <div class="tabLeft">
	    pellet = self.pacman.eatPellets(self.pellets.pelletList)<br>
	    if pellet:
	    <div class="tabLeft">
	      self.idleTimer = 0<br>
	      <p>...</p>
	      if self.ghost.mode.name != "FREIGHT":
	      <div class="tabLeft">
		self.pacman.reduceSpeed()
	      </div>
	    </div>
	    else:
	    <div class="tabLeft">
	      self.idleTimer += dt<br>
	      if self.idleTimer >= 0.5
	      <div class="tabLeft">
		self.pacman.normalSpeed()
	      </div>
	    </div>
	  </div>
	</code>
      </div>









    </div><!--End of container-->
    
    
    <div class="container">  
      <h3>Conclusion</h3>
      <p>With the end of every section we're getting closer to the end of the game.  I know that I said we would add the ghosts after this section, and that's still true.  However, we still haven't added the fruit yet and I would rather take care of that first.  Why am I avoiding adding the other three ghosts in?  I don't know, maybe it's because I don't like adding complexity until I know for sure that things are working perfectly. The real reason is because it's going to be a big section so I lose motivation and go for the smaller sections first.  When I'm pushed into a corner, then I'll add in the rest of the ghosts.  But for now, let's deal with the fruit in the next section.</p>
    </div> <!--End of the conclusion container-->
    <hr />

    <div class="container">
      <h2>File Structure</h2>
      <ul>
	<li>Pacman</li>
	<ul>
	  <li>constants.py</li>
	  <li>entities.py</li>
	  <li>gamecontrol.py</li>
	  <li>ghosts.py</li>
	  <li>home.txt</li>
	  <li>maze1.txt</li>
	  <li>nodes.py</li>
	  <li>pacman.py</li>
	  <li>pellets.py</li>
	  <li>stacks.py</li>
	  <li>vectors.py</li>
	</ul>
      </ul>
    </div><!--End of File Structure container-->
    </div><!--End of Page container-->


    <div class="buffer"></div>
    <footer>
      <div class="bottomNav">
	<ul>
	  <li><a href="section13.html">Previous</a></li>
	  <li><a href="#top">Top</a></li>
	  <li><a href="section15.html">Next</a></li>
	</ul>
      </div>
    </footer>
  </body>
</html>
